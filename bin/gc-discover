#!/usr/bin/perl

# gc-estimate (Grand-Convergence parameter estimation)

# Jason de Koning, April 2015
# de Koning Lab, University of Calgary
# http://lab.jasondk.io

# Wrapper to run grand-conv - IN PROGRESS / NOT FINISHED

# Primary input options allowed:
# --dir=output (folder name for output and temp files)
# --nthreads=4 (number of threads to use)
# --branch-pairs=(1,2),(3,4) (outputs sites data on branch pair ..1 x ..2 and ..3 x ..4)

# Allowed command-line options dictionary
my %allowed = ("dir"=>"output", "nthreads"=>1, "branch-pairs"=>"", "branch1"=>"", "branch2"=>"", "RateAncestor"=>2, "visualize"=>0 );

# Parse input options and store in opts
my %opts = parseInput(\@ARGV);
my $template = "$opts{'dir'}/runme-gc.ctl";
my $suffix   = "assets/grand-conv-suffix.ctl";

# Set output filename
$opts{"outfile"} = "../$opts{'dir'}/gc-output.out";

# Set optional default options
applyDefaults( \%opts );

unpackBranches( \%opts );

print "Outputting runnable control file (gc-discover)...\n";
createControlfile(1, "$opts{'dir'}/runme-gc-discover.ctl", \%opts );

print "Running Grand Convergence...\n";
if (! -e "$opts{'dir'}/UI" ) { mkdir "$opts{'dir'}/UI"; }
if (! -e "$opts{'dir'}/UI/User" ) { mkdir "$opts{'dir'}/UI/User"; }
if (! -e "$opts{'dir'}/UI/User/assets" ) { mkdir "$opts{'dir'}/UI/User/assets"; }

system("cp assets/UI/* $opts{'dir'}/UI/");
system("cp -r assets/UI/assets/* $opts{'dir'}/UI/User/assets/");
system("cp assets/UI/about.html $opts{'dir'}/UI/User/");
system("cd $opts{'dir'} && ../bin/grand-conv runme-gc-discover.ctl");

print "\nDone gc-discover. Results are in $opts{'dir'}/UI/User/index.html\n";

print "\nDone gc-discover.\n";

if ($opts{'visualize'} == 1) {
       if ($^O =~ /linux/) {
               system("xdg-open ./$opts{'dir'}/UI/User/index.html");
       } elsif ($^O =~ /darwin/) {
               system("open ./$opts{'dir'}/UI/User/index.html");
       }
} else {
       print "\nYou can view the results in $opts{'dir'}/UI/User/index.html\n";
}
exit;

# Functions
# =============================================================================================================

sub unpackBranches {
	my $optRef = shift;
	my $opts = %$optRef;

	$opts{'branch1'} = "";
	$opts{'branch2'} = "";
	foreach $key (keys %opts) {
		if ($key eq "branch-pairs") {
			@tok = split(',', $opts{$key});
			for (my $i=0;$i<$#tok+1;$i+=2) {
				$tok[$i] =~ s/[\(\)\'\"]//g;
				if ($opts{'branch1'} ne "") {
					$opts{'branch1'} .= ",";
				}
				$opts{'branch1'} .= $tok[$i];

				$tok[$i+1] =~ s/[\(\)\'\"]//g;
				if ($opts{'branch2'} ne "") {
					$opts{'branch2'} .= ",";
				}
				$opts{'branch2'} .= $tok[$i+1];
			}
		}
	}
}

sub captureOutput {
	my $dir = shift;
	open(IN, "$dir/codeml-output.out") or die "Error: Cannot output expected output file codeml-output.out in $dir\n";
	my $notDone=1;

	while ($notDone && !eof(IN) ) {
		my $line = <IN>;
		chomp($line);
		if ($line =~ m/tree length/) {
			my $dummy = <IN>; $dummy=<IN>; $dummy=<IN>;
			my $tree = <IN>; chomp($tree);

			$dummy = <IN>; $dummy = <IN>; $dummy = <IN>;
			$alphaLine = <IN>; chomp($alphaLine);
			$alphaLine =~ m/([0-9\.]+)$/;
			$alpha = $1;

			# Write tree
			open(OUT, ">$opts{'dir'}/gc-estimated-bls.tree");
			print OUT $tree."\n";
			close OUT;

			# Store alpha
			if ($opts{'free-gamma'}) {
				$opts{'alpha'} = $alpha;
			}

			$notDone=0;
		}
	}
	close IN;
}

sub applyDefaults {
	# Apply defaults to unset options; enforce required options (input files)
	foreach $key (keys %allowed) {
		if ( exists( $opts{$key} ) ) { } else {
			if ( $key eq "in" ) {
				die "Error: a sequence alignment is required with --in=file.\n";
			}
			if ( $key eq "tree" ) {
				die "Error: a phylogenetic tree is required with --tree=file.\n";
			}

			unless ($key eq "alpha") { $opts{$key} = $allowed{$key}; }
		}
	}
}

sub createControlfile {
	# Create a control-file using template and options dictionary
	my $phase = shift;
	my $fname = shift;
	my $optRef = shift;
	my %options = %$optRef;

	my @files = ( $template, $suffix );

	# Need to actually output this to disk now
	open(OUT, ">".$fname) or die "Error: Can't open file $fname for output.\n";
	foreach $infile (@files) {
		# Correspondence with PAML controls
		my %commandOptions = ( "nthreads"=>"numOfThreads", "branch1" => "branch1", "branch2" => "branch2", "outfile"=>"outfile", "RateAncestor"=>"RateAncestor");
		my %revCommandOptions = reverse %commandOptions;

		open(IN, $infile) or die "Error: cannot open template control file $template.\n";
		while (my $line = <IN>) {
			chomp($line);
			$line =~ s/^\s+//g;
			my $flag = 0;
			my $val = 0;
			foreach $opt (keys %revCommandOptions) {
				if ($line =~ m/^$opt[\s\+]=/) {
					if ($opt eq "fix_blength") {
						if ($phase==1) {
							$val = $options{$revCommandOptions{"fix_blength"}};
							if ($val eq '1') { $val = 0; } else { $val = 2; }
						} else {
							$val = 2;
						}			
						print OUT "\t$opt = $val\n"; 
					} elsif ($opt eq "seqfile") {
						$val = $options{$revCommandOptions{"seqfile"}};
						print OUT "\t$opt = ../$val\n"; 
					} elsif ($opt eq "treefile") {
						if ($phase == 1) {
							$val = $options{$revCommandOptions{"treefile"}};
						} else {
							$val = "$opts{'dir'}/gc-estimated-bls.tree" 
						}	
						print OUT "\t$opt = ../$val\n";
					} elsif ($opt eq "fix_alpha") {
						if ($phase == 1) {
							$val = $options{$revCommandOptions{"fix_alpha"}};
							if ($val eq '1') { $val = 0; } else { $val = 1; }
						} else {
							$val = 1;
						}
						print OUT "\t$opt = $val\n"; 
					} elsif ($opt eq "alpha") {
						$val = $options{$revCommandOptions{"alpha"}};
						if ($val eq "") { $val = 1; } 
						print OUT "\t$opt = $val\n"; 
					} elsif ($opt eq "aaRatefile") {
						print OUT "\t$opt = ../dat/$options{$revCommandOptions{$opt}}.dat\n";
					} else {
						print OUT "\t$opt = $options{$revCommandOptions{$opt}}\n";
					}
					$flag=1;
				}
			}
			if ($flag==0) {
				print OUT "\t$line\n";
			}
		}
		close IN;
	}
	close OUT;
}

sub parseInput {
	# Return a dictionary of command-line options
	my $optRef = shift;
	my @opt = @$optRef;
	my %parsed;

	foreach $key ( @opt ) {
		@tok = split('[=]', $key);
		$tok[0] =~ s/--//g;
		$parsed{$tok[0]} = $tok[1];
	}

	foreach $key (keys %parsed) {
		if ( exists( $allowed{$key} ) ) { }
		else { die "Error: Option $key unrecognized.\n"; }
	}

	return %parsed;
}
